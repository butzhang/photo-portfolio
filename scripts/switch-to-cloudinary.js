// This script will help you switch from local images to Cloudinary URLs
// Run with: node scripts/switch-to-cloudinary.js

const fs = require('fs')
const path = require('path')

// Path to the mapping file generated by generate-cloudinary-map.js
const MAPPING_FILE = path.join(process.cwd(), 'cloudinary-mapping.json')

// Files to update
const FILES_TO_UPDATE = [
  path.join(process.cwd(), 'app', 'page.tsx'),
  path.join(process.cwd(), 'app', 'projects', '[project]', 'page.tsx'),
]

// Main function
async function main() {
  console.log('Switching from local images to Cloudinary URLs...')

  // Check if mapping file exists
  if (!fs.existsSync(MAPPING_FILE)) {
    console.error(
      'Error: Mapping file not found. Please run generate-cloudinary-map.js first.',
    )
    return
  }

  // Load mapping
  const mapping = JSON.parse(fs.readFileSync(MAPPING_FILE, 'utf8'))
  console.log(`Loaded mapping with ${Object.keys(mapping).length} images`)

  // Update each file
  for (const filePath of FILES_TO_UPDATE) {
    console.log(`Processing ${filePath}...`)

    // Check if file exists
    if (!fs.existsSync(filePath)) {
      console.warn(`Warning: File not found: ${filePath}`)
      continue
    }

    // Read file
    let content = fs.readFileSync(filePath, 'utf8')
    let replacements = 0

    // Replace local paths with Cloudinary URLs
    for (const [localPath, cloudinaryUrl] of Object.entries(mapping)) {
      // Escape special characters in the local path for regex
      const escapedLocalPath = localPath.replace(
        /[-/\\^$*+?.()|[\]{}]/g,
        '\\$&',
      )
      const regex = new RegExp(`(['"])${escapedLocalPath}(['"])`, 'g')

      const updatedContent = content.replace(regex, `$1${cloudinaryUrl}$2`)

      if (content !== updatedContent) {
        replacements += (content.match(regex) || []).length
        content = updatedContent
      }
    }

    // Write back to file if changes were made
    if (replacements > 0) {
      // Create backup
      fs.writeFileSync(`${filePath}.bak`, fs.readFileSync(filePath))

      // Write updated content
      fs.writeFileSync(filePath, content)
      console.log(`Made ${replacements} replacements in ${filePath}`)
    } else {
      console.log(`No replacements needed in ${filePath}`)
    }
  }

  console.log('Done!')
}

// Run the script
main()
